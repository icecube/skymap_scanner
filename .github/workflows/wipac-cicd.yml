name: wipac ci/cd

on: [push]

env:
  BOT_NAME: wipacdevbot
  BOT_EMAIL: developers@icecube.wisc.edu

jobs:

  # flake8:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v3
  #     - uses: WIPACrepo/wipac-dev-flake8-action@v1

  # mypy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v3
  #       with:
  #         python-version: '3.9'
  #     - uses: WIPACrepo/wipac-dev-mypy-action@v1.1

  test-temporary-for-pr:
    runs-on: ubuntu-latest
    env:
      WAIT_FOR_JOBS: "test-build-docker; test-run-single-pixel (GOLD); test-run-single-pixel (JSON)"
      OK_STATUSES: "completed; skipped"
      WAIT_TIME: 30  # seconds
      TOTAL_TIMEOUT: 3600  # seconds
    steps:
      - name: Wait on Other Jobs
        run: |
          python3 -u -c '
          import time
          import sys
          import requests
          from pprint import pprint

          JOBS = [j.strip() for j in "${{ env.WAIT_FOR_JOBS }}".split(";")]
          print(f"Checking jobs: {JOBS}")
          OK_STATUSES = [s.strip() for s in "${{ env.OK_STATUSES }}".split(";")]
          print(f"Jobs must have these statuses: {OK_STATUSES}")

          headers = {
              "Authorization": "Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28",
          }

          def get_statuses():
              for cname in JOBS:
                  resp = requests.get(
                      "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs",
                      headers=headers,
                      params={
                          "filter": "latest",  # we dont want previous runs (but if re-job hasnt been re-created, we will get the old one...)
                          "check_name": cname,
                      },
                  ).json()
                  pprint(resp)
                  for crun in resp["check_runs"]:  # ther may be muliple checks (jobs) w/ same name
                      print( (crun["name"], crun["id"], crun["status"]) )
                      yield crun["name"], crun["status"]

          # MAIN RETRY LOOP
          start = time.time()
          while True:
              print("\n###############################################################")
              print("Waiting for job statuses (${{ env.WAIT_TIME }} seconds)...")
              if time.time() - start > ${{ env.TOTAL_TIMEOUT }}:
                  print("Timeout.")
                  sys.exit(1)
              time.sleep(${{ env.WAIT_TIME }})

              # get statuses
              okay_jobs = set()
              for job, status in get_statuses():
                  print(f"Job status: {job} ({status})")
                  if status not in OK_STATUSES:
                      # NOTE: there may be multiple jobs called X, so we need remove on each bad status then break
                      okay_jobs.remove(job)  # in case a name-twin was marked as okay
                      break  # break early to limit requests
                  okay_jobs.add(job)

              # final check
              if okay_jobs == set(JOBS):
                  print("The wait is over!")
                  break
              print(f"Pending jobs: {set(JOBS) - okay_jobs}")
          '

  py-setup:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: WIPACrepo/wipac-dev-py-setup-action@v1.12
        if: github.actor != ${{ env.BOT_NAME }}  # no auto-updates for bots # should match all 'git_committer_name' uses
        with:
          git_committer_name: $BOT_NAME
          git_committer_email: $BOT_EMAIL

  py-versions:
    needs: [py-setup]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2

  pip-install:
    # FUTURE DEV: this can be expanded to run actual tests instead of just pip installing
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          pip install --upgrade pip wheel setuptools
          pip install .[all,client-starter]

  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [py-setup, pip-install]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: lewagon/wait-on-check-action@v1.3.1
      # wait for the long CI tests to pass
      with:
        ref: ${{ github.sha }}
        check-name: 'All Tests Done'
        repo-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        wait-interval: 30
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@master
      with:
        git_committer_name: $BOT_NAME
        git_committer_email: $BOT_EMAIL
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        # repository_username: __token__
        # repository_password: ${{ secrets.PYPI_TOKEN }}

