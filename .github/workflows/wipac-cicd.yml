name: wipac ci/cd

on: [push]

env:
  BOT_NAME: wipacdevbot
  BOT_EMAIL: developers@icecube.wisc.edu

jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.1

  # flake8:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v3
  #     - uses: WIPACrepo/wipac-dev-flake8-action@v1.0

  mypy:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v1.2

  wait-for-tests:  # pass always when not on main (don't use 'if' b/c downstream)
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      # don't cancel on main/master/default
      cancel-in-progress: ${{ format('refs/heads/{0}', github.event.repository.default_branch) != github.ref }}
    env:
      WAIT_FOR_JOBS: "test-build-docker; test-build-docker-pulsar; test-run-singularity-dummy-reco; test-file-staging; test-run-nsides-thresholds-dummy; test-run-realistic; test-run-single-pixel"
      OK_CONCLUSION: "success; skipped"  # see https://docs.github.com/en/rest/checks/runs?apiVersion=2022-11-28
      STARTUP_WAIT: 60  # seconds
      RETRY_TIME: 60  # seconds
      TOTAL_WAIT_TIME: 4500  # seconds
    steps:
      - name: Wait on Other Jobs
        # HEADS UP: if you re-run a workflow, the job may get old conclusions & pass.
        #   So, add many jobs to WAIT_FOR_JOBS
        run: |
          python3 -u -c '
          import time
          import sys
          import requests
          import re
          from pprint import pprint
          import itertools as it

          print("Waiting for ${{ env.STARTUP_WAIT }} seconds for jobs to start up")
          time.sleep(${{ env.STARTUP_WAIT }})  # wait for jobs to start

          JOB_PATTERNS = {re.compile(fr"{re.escape(j.strip())}( \(.+\))?"): set() for j in "${{ env.WAIT_FOR_JOBS }}".split(";")}
          print(f"Checking job patterns: {JOB_PATTERNS.keys()}")
          OK_CONCLUSION = [s.strip() for s in "${{ env.OK_CONCLUSION }}".split(";")]
          print(f"Jobs must have these conclusions: {OK_CONCLUSION}")

          headers = {
              "Authorization": "Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28",
          }
          url = "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs"

          def match_to_pattern(name: str):
              # return matching regex & add name to JOB_PATTERNS entry
              for p in JOB_PATTERNS:
                  if p.fullmatch(name):
                      JOB_PATTERNS[p].add(name)  # record job
                      return p
              return None

          def get_conclusions():
              print(f"requesting {url} ...")
              resp = requests.get(
                  url,
                  headers=headers,
                  params={
                      "filter": "latest",  # we dont want previous runs (but if re-job hasnt been re-created, we will get the old one...)
                      # "status": "completed",  # in case of re-run get uncompleted newby over completed oldy
                  },
              ).json()
              print(resp)
              for crun in sorted(resp["check_runs"], key=lambda d: d["name"]):  # there may be muliple checks (jobs) w/ same name
                  if not (pat := match_to_pattern(crun["name"])):
                      print("ignoring: " + str((crun["name"], crun["id"], crun["conclusion"])))
                      continue
                  print( (pat, crun["name"], crun["id"], crun["conclusion"]) )
                  yield crun["name"], crun["conclusion"]

          def get_pending() -> list[str]:
              # get conclusions
              okay_jobs = set()
              bad_jobs = set()
              for job, conclusion in get_conclusions():
                  if job in bad_jobs:
                      continue
                  if conclusion in OK_CONCLUSION:
                      okay_jobs.add(job)
                  else:
                      # NOTE: there may be multiple jobs called X, so we need remove on each bad conclusion
                      okay_jobs.discard(job)  # in case a name-twin was marked as okay
                      bad_jobs.add(job)
              # final check -- get unfinished jobs + unmatched patterns
              return sorted(
                  [j for j in it.chain(*JOB_PATTERNS.values()) if j not in okay_jobs]
                  + [str(p) for p in JOB_PATTERNS if not JOB_PATTERNS[p]]
              )

          # MAIN RETRY LOOP
          start = time.time()
          while True:
              print("\n###############################################################")
              print("Waiting for job conclusions (${{ env.RETRY_TIME }} seconds)...")
              if time.time() - start > ${{ env.TOTAL_WAIT_TIME }}:
                  print("Timeout.")
                  sys.exit(1)
              time.sleep(${{ env.RETRY_TIME }})

              pending = get_pending()

              if not pending:
                  print("All jobs appear to be done, rechecking in ${{ env.STARTUP_WAIT }} seconds...")
                  time.sleep(${{ env.STARTUP_WAIT }})
                  if pending := get_pending():
                      print(f"Not done! More jobs started up: {pending}")
                      continue  # more jobs started up
                  print("The wait is over!")
                  break
              # NOTE: it is tempting to see if we have all failed or all ok jobs and quit early !BUT! those failures/oks could be from earlier runs so we need to wait for timeout
              print("Pending jobs:")
              for p in pending:
                  print(p)
          '

  py-setup:
    # needs: [wait-for-tests]  # NOTE: this would be needed if enabling "all tests to pass" branch protection
    runs-on: ubuntu-latest
    steps:
      - uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: 'true'
          large-packages: false  # TODO: remove once https://github.com/jlumbroso/free-disk-space/issues/4 is fixed
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: WIPACrepo/wipac-dev-py-setup-action@v2.1
        if: github.actor != ${{ env.BOT_NAME }}  # no auto-updates for bots # should match all 'git_committer_name' uses
        with:
          git_committer_name: ${{ env.BOT_NAME }}
          git_committer_email: ${{ env.BOT_EMAIL }}

  pip-install:
    # If this fails, the longer tests are sure to fail
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          pip install --upgrade pip wheel setuptools
          pip install .[all,client-starter]

  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [py-setup, pip-install, wait-for-tests]  # have to wait for tests so python-semantic-release can push (branch protection on main)
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@master
      with:
        git_committer_name: ${{ env.BOT_NAME }}
        git_committer_email: ${{ env.BOT_EMAIL }}
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        # repository_username: __token__
        # repository_password: ${{ secrets.PYPI_TOKEN }}

