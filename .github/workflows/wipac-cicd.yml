name: wipac ci/cd

on: [push]

env:
  BOT_NAME: wipacdevbot
  BOT_EMAIL: developers@icecube.wisc.edu

jobs:

  # flake8:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v3
  #     - uses: WIPACrepo/wipac-dev-flake8-action@v1

  # mypy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v3
  #       with:
  #         python-version: '3.9'
  #     - uses: WIPACrepo/wipac-dev-mypy-action@v1.1

  test-temporary-for-pr:
    runs-on: ubuntu-latest
    steps:
      - run: |
          python3 -c '
          import requests
          from pprint import pprint

          headers = {
              "Authorization": "Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28",
          }

          # find check suites (for GitHub Actions)
          resp = requests.get(
              "https://api.github.com/repos/icecube/skymap_scanner/commits/${{ github.sha }}/check-suites",
              headers=headers,
          ).json()
          print(resp["total_count"])
          check_suite_ids = [cs["id"] for cs in resp["check_suites"] if cs["app"]["name"] == "GitHub Actions"]
          print(check_suite_ids)

          # find check runs
          check_run_statuses = []
          for csid in check_suite_ids:
            resp = requests.get(
                f"https://api.github.com/repos/icecube/skymap_scanner/check-suites/{csid}/check-runs",
                headers=headers,
                params={"filter": "latest"},
            ).json()
            check_run_statuses.extend([ (cr["name"],cr["id"],cr["status"]) for cr in resp["check_runs"] ])

          print(check_run_statuses)

          '

  py-setup:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: WIPACrepo/wipac-dev-py-setup-action@v1.12
        if: github.actor != ${{ env.BOT_NAME }}  # no auto-updates for bots # should match all 'git_committer_name' uses
        with:
          git_committer_name: $BOT_NAME
          git_committer_email: $BOT_EMAIL

  py-versions:
    needs: [py-setup]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2

  pip-install:
    # FUTURE DEV: this can be expanded to run actual tests instead of just pip installing
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          pip install --upgrade pip wheel setuptools
          pip install .[all,client-starter]

  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [py-setup, pip-install]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: lewagon/wait-on-check-action@v1.3.1
      # wait for the long CI tests to pass
      with:
        ref: ${{ github.sha }}
        check-name: 'All Tests Done'
        repo-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        wait-interval: 30
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@master
      with:
        git_committer_name: $BOT_NAME
        git_committer_email: $BOT_EMAIL
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        # repository_username: __token__
        # repository_password: ${{ secrets.PYPI_TOKEN }}

