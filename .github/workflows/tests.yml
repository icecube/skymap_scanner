name: ci/cd

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # don't cancel on main/master/default
  cancel-in-progress: ${{ format('refs/heads/{0}', github.event.repository.default_branch) != github.ref }}


env:
  PY_COLORS: "1"
  BOT_NAME: wipacdevbot
  BOT_EMAIL: developers@icecube.wisc.edu
  #
  CI_DOCKER_IMAGE_TAG: icecube/skymap_scanner:local
  #
  CI_TEST_RUN_STDOUT_STDERR_DIR: /home/runner/work/skymap_scanner/testrun_outputs
  N_WORKERS: 2
  REALTIME_EVENTS_DIR: /home/runner/work/skymap_scanner/skymap_scanner/tests/data/realtime_events
  CI_SKYSCAN_CACHE_DIR: /home/runner/work/skymap_scanner/skymap_scanner/cache
  CI_SKYSCAN_OUTPUT_DIR: /home/runner/work/skymap_scanner/skymap_scanner/output
  CI_SKYSCAN_DEBUG_DIR: /home/runner/work/skymap_scanner/skymap_scanner/debug
  # see source tests/env-vars.sh


jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.7

  #############################################################################
  # LINTERS
  #############################################################################

  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.3
        with:
          max-complexity: 16  # ideal is ~10-15

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit ('github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0

  #############################################################################
  # PACKAGING
  #############################################################################

  py-setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-py-setup-action@migratiion-script
        with:
          mode: PACKAGING
          python_min: 3.9
          keywords_comma: "WIPAC, IceCube, Skymap Scanner, Reconstruction, IceTray, EWMS"
          auto_mypy_option: True

  py-dependencies:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    steps:
      - uses: jlumbroso/free-disk-space@main  # need space for images to build
        with:
          docker-images: false
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: skymap_scanner:py-dep-this
          load: true
      - uses: WIPACrepo/wipac-dev-py-dependencies-action@v3.0


  #############################################################################
  # TESTS
  #############################################################################

  test-build-docker:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_TAG }}
          load: true

  test-run-dummy:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        reco_algo: [
          "dummy",
          "crash_dummy"
        ]
        container_platform: [
          "docker",
          "apptainer",
        ]
    env:
      SKYSCAN_MQ_TOCLIENT_BROKER_ADDRESS: user1@localhost/test
      SKYSCAN_MQ_TOCLIENT_AUTH_TOKEN: password  # using this would override password in address
      SKYSCAN_MQ_FROMCLIENT_BROKER_ADDRESS: user1@localhost/test
      SKYSCAN_MQ_FROMCLIENT_AUTH_TOKEN: password  # using this would override password in address
      EWMS_PILOT_STOP_LISTENING_ON_TASK_ERROR: True  # one crash per pilot is enough
      EWMS_PILOT_TASK_TIMEOUT: 15
    services:
      rabbitmq:
        # see image.tag -> https://github.com/Observation-Management-Service/path-kubernetes/blob/main/helm-values-rabbitmq-bitnami.yaml (see https://artifacthub.io/packages/helm/bitnami/rabbitmq/11.14.3)
        image: bitnami/rabbitmq:3.11.15-debian-11-r0
        env:
          RABBITMQ_USERNAME: user1
          RABBITMQ_PASSWORD: password
          RABBITMQ_VHOST: test
          BITNAMI_DEBUG: true
        # Note: `--network` option is not supported.
        options: >-
          --name rabbitmq
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5672:5672
          - 15672:15672
    steps:
      - uses: jlumbroso/free-disk-space@main  # need space for mq broker and image
        with:
          docker-images: false
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_TAG }}
          load: true

      - if: ${{ matrix.container_platform == 'apptainer' }}
        name: install apptainer
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -x
          
          # https://github.com/apptainer/apptainer/blob/main/INSTALL.md#installing-apptainer
          # Ensure repositories are up-to-date
          sudo apt-get update
          # Install debian packages for dependencies
          sudo apt-get install -y \
              build-essential \
              libseccomp-dev \
              pkg-config \
              uidmap \
              squashfs-tools \
              fakeroot \
              cryptsetup \
              tzdata \
              dh-apparmor \
              curl wget git
          # Clone the repo
          git clone https://github.com/apptainer/apptainer.git
          cd apptainer
          git checkout v1.3.2
          # Compiling Apptainer
          ./mconfig
          cd $(/bin/pwd)/builddir
          make
          sudo make install
          apptainer --version
          
          # https://github.com/apptainer/apptainer/blob/main/INSTALL.md#apparmor-profile-ubuntu-2310
          sudo tee /etc/apparmor.d/apptainer << 'EOF'
          # Permit unprivileged user namespace creation for apptainer starter
          abi <abi/4.0>,
          include <tunables/global>
          profile apptainer /usr/local/libexec/apptainer/bin/starter{,-suid} 
              flags=(unconfined) {
            userns,
            # Site-specific additions and overrides. See local/README for details.
            include if exists <local/apptainer>
          }
          EOF
          sudo systemctl reload apparmor
      - if: ${{ matrix.container_platform == 'apptainer' }}
        name: build apptainer (.sif) image
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          apptainer build skymap_scanner.sif docker-daemon://$CI_DOCKER_IMAGE_TAG
          ls -lh skymap_scanner.sif
      - if: ${{ matrix.container_platform == 'apptainer' }}
        name: Install squashfuse in order to run .sif
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          # without squashfuse, .sif can't be run directly and needs to be converted
          #  to a sandbox dir, 1 for each instance
          sudo apt-get update
          sudo apt-get install -y squashfuse
      - if: ${{ matrix.container_platform == 'apptainer' }}
        name: clear up disk space
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          
          echo "=== Disk usage summary ==="
          df -h /
          
          echo "=== Before: docker system df ==="
          docker system df
          echo "=== All Docker images ==="
          docker images
          echo "=== All Docker containers ==="
          docker ps -a
          echo "=== Removing containers using $CI_DOCKER_IMAGE_TAG ==="
          docker ps -a --filter "ancestor=$CI_DOCKER_IMAGE_TAG" --format '{{.ID}}' | xargs -r docker rm -f
          docker rmi -f "$CI_DOCKER_IMAGE_TAG" || true
          echo "=== Remove BuildKit container and volume ==="
          docker ps -a --filter "ancestor=moby/buildkit:buildx-stable-1" --format '{{.ID}}' | xargs -r docker rm -f
          echo "=== Volume prune ==="
          docker volume prune -f
          echo "=== Builder prune ==="
          docker builder prune -a -f
          echo "=== System prune (including volumes) ==="
          docker system prune -a --volumes -f
          echo "=== After: docker system df ==="
          docker system df
          
          echo "=== Clear up space w/ apt-get ==="
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*  # delete all cached package metadata 

          echo "=== Disk usage summary ==="
          df -h /

      - name: run
        timeout-minutes: 15  # on average ~9min
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -x
          source tests/env-vars.sh
          export _RECO_ALGO="${{ matrix.reco_algo }}"
          export _EVENTS_FILE=$(realpath $REALTIME_EVENTS_DIR/hese_event_01.json)
          export _NSIDES="1:0 2:12 4:12"
          
          # set special env vars
          if [ "${{ matrix.container_platform }}" == "apptainer" ]; then
              export _RUN_THIS_SIF_IMAGE="$(realpath skymap_scanner.sif)"
              export _EWMS_PILOT_APPTAINER_IMAGE_DIRECTORY_MUST_BE_PRESENT=False
          fi
          if [ "${{ matrix.reco_algo }}" == "crash_dummy" ]; then
              export _SKYSCAN_CI_CRASH_DUMMY_PROBABILITY=0.75
          fi
          
          # run!
          cd ./resources/launch_scripts
          if [ "${{ matrix.reco_algo }}" == "crash_dummy" ]; then
              set +e  # allow `||` to supress first non-zero exit
              python3 local_scan.py $N_WORKERS $CI_TEST_RUN_STDOUT_STDERR_DIR \
                || echo "::warning::scan failed, checking outputs to see if it failed as expected..."
          else
              python3 local_scan.py $N_WORKERS $CI_TEST_RUN_STDOUT_STDERR_DIR
          fi

      - if: ${{ matrix.reco_algo == 'crash_dummy' }}
        name: look at stderrfiles
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -x
          # check for fails/errors

          error_type_1='intentional crash-dummy error'
          error_type_2='subprocess timed out after'
          pattern="$error_type_1|$error_type_2"

          if find "$CI_TEST_RUN_STDOUT_STDERR_DIR/worker-"*/pilot.out -type f -exec grep -qE "$pattern" {} +; then
              echo "Match(es) found: PilotSubprocessError and/or TimeoutError occurred."
          else
              echo "::error::Could not find the expected error(s) in worker/pilot outputs."
              exit 1
          fi
      - if: ${{ matrix.reco_algo == 'dummy' }}
        name: look at results file (.npz)
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          ls .
          ls $CI_SKYSCAN_OUTPUT_DIR
          outfile=$(ls -d $CI_SKYSCAN_OUTPUT_DIR/*.npz)
          echo $outfile

      - name: dump output -- central server stdout/stderr
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          cat $CI_TEST_RUN_STDOUT_STDERR_DIR/server.out
      - name: dump output -- worker pilot \#1 stdout/stderr
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          more $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot.out | cat
      - name: dump output -- worker clients / reco-icetray instances \#1 stdouts/stderrs
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          find $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot-* -name "stderrfile" -o -name "stdoutfile" | xargs more | cat
          echo "::::::::::::::" && tree $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot-*
      - name: dump output -- worker pilot \#2 stdout/stderr
        if: always() && env.N_WORKERS == '2'
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          more $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot.out | cat
      - name: dump output -- worker clients / reco-icetray instances \#2 stdouts/stderrs
        if: always() && env.N_WORKERS == '2'
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          find $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot-* -name "stderrfile" -o -name "stdoutfile" | xargs more | cat
          echo "::::::::::::::" && tree $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot-*

  test-run-nsides-thresholds-dummy:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        nsides: [
          "1:0",
          "1:0 2:12",
          "1:0 2:12 4:12"
        ]
        predictive_scanning_threshold: [
          1.0,
          0.65,
        ]
    env:
      SKYSCAN_MQ_TOCLIENT_BROKER_ADDRESS: user1@localhost/test
      SKYSCAN_MQ_TOCLIENT_AUTH_TOKEN: password  # using this would override password in address
      SKYSCAN_MQ_FROMCLIENT_BROKER_ADDRESS: user1@localhost/test
      SKYSCAN_MQ_FROMCLIENT_AUTH_TOKEN: password  # using this would override password in address
    services:
      rabbitmq:
        # see image.tag -> https://github.com/Observation-Management-Service/path-kubernetes/blob/main/helm-values-rabbitmq-bitnami.yaml (see https://artifacthub.io/packages/helm/bitnami/rabbitmq/11.14.3)
        image: bitnami/rabbitmq:3.11.15-debian-11-r0
        env:
          RABBITMQ_USERNAME: user1
          RABBITMQ_PASSWORD: password
          RABBITMQ_VHOST: test
          BITNAMI_DEBUG: true
        # Note: `--network` option is not supported.
        options: >-
          --name rabbitmq
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5672:5672
          - 15672:15672
    steps:
      - uses: jlumbroso/free-disk-space@main  # need space for mq broker and image
        with:
          docker-images: false
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_TAG }}
          load: true
      - name: run
        timeout-minutes: 12  # on average max~=8.5min
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -x
          source tests/env-vars.sh
          export _RECO_ALGO=dummy
          export _EVENTS_FILE=$(realpath $REALTIME_EVENTS_DIR/hese_event_01.json)
          export _NSIDES="${{ matrix.nsides }}"
          export _PREDICTIVE_SCANNING_THRESHOLD=${{ matrix.predictive_scanning_threshold }}

          cd ./resources/launch_scripts
          python3 local_scan.py $N_WORKERS $CI_TEST_RUN_STDOUT_STDERR_DIR

      - name: check no nsides skipped
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          ls $CI_SKYSCAN_OUTPUT_DIR
          # get newest run*.json
          export outfile=$(find $CI_SKYSCAN_OUTPUT_DIR -type f -name "run*.json" -exec stat -c '%y %n'  {} + | sort | tail -1 | awk '{print $4}')
          echo $outfile
          python3 -c '
          import json
          import os
          with open(os.getenv("outfile")) as f:
            pydict = json.load(f)
          nsides = "${{ matrix.nsides }}"
          assert len(pydict) == nsides.count(":")
          '

      - name: dump output -- central server stdout/stderr
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          cat $CI_TEST_RUN_STDOUT_STDERR_DIR/server.out
      - name: dump output -- worker pilot \#1 stdout/stderr
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          more $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot.out | cat
      - name: dump output -- worker clients / reco-icetray instances \#1 stdouts/stderrs
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          find $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot-* -name "stderrfile" -o -name "stdoutfile" | xargs more | cat
          echo "::::::::::::::" && tree $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot-*
      - name: dump output -- worker pilot \#2 stdout/stderr
        if: always() && env.N_WORKERS == '2'
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          more $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot.out | cat
      - name: dump output -- worker clients / reco-icetray instances \#2 stdouts/stderrs
        if: always() && env.N_WORKERS == '2'
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          find $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot-* -name "stderrfile" -o -name "stdoutfile" | xargs more | cat
          echo "::::::::::::::" && tree $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot-*

      - name: rabbitmq logs
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          docker logs rabbitmq


  test-run-realistic:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        reco_algo: [
          millipede_original,
          millipede_wilks,
          splinempe,
          splinempe_pointed
        ]
        eventfile: [
          hese_event_01.json,
          run00136766-evt000007637140-GOLD.pkl,
          run00136662-evt000035405932-BRONZE.pkl,
          138632_31747601.json
        ]
        exclude:
          # splinempe should not run on HESE
          - reco_algo: splinempe
            eventfile: hese_event_01.json
          - reco_algo: splinempe_pointed
            eventfile: hese_event_01.json
    env:
      SKYSCAN_MQ_TOCLIENT_BROKER_ADDRESS: user1@localhost/test
      SKYSCAN_MQ_TOCLIENT_AUTH_TOKEN: password  # using this would override password in address
      SKYSCAN_MQ_FROMCLIENT_BROKER_ADDRESS: user1@localhost/test
      SKYSCAN_MQ_FROMCLIENT_AUTH_TOKEN: password  # using this would override password in address
    services:
      rabbitmq:
        # see image.tag -> https://github.com/Observation-Management-Service/path-kubernetes/blob/main/helm-values-rabbitmq-bitnami.yaml (see https://artifacthub.io/packages/helm/bitnami/rabbitmq/11.14.3)
        image: bitnami/rabbitmq:3.11.15-debian-11-r0
        env:
          RABBITMQ_USERNAME: user1
          RABBITMQ_PASSWORD: password
          RABBITMQ_VHOST: test
          BITNAMI_DEBUG: true
        # Note: `--network` option is not supported.
        options: >-
          --name rabbitmq
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5672:5672
          - 15672:15672
    steps:
      - uses: jlumbroso/free-disk-space@main  # need space for mq broker and image
        with:
          docker-images: false
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_TAG }}
          load: true

      - name: run
        timeout-minutes: 55  # on average max~=35min
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -x
          lscpu
          python3 --version
          source tests/env-vars.sh
          export _RECO_ALGO=${{ matrix.reco_algo }}
          export _EVENTS_FILE=$(realpath $REALTIME_EVENTS_DIR/${{ matrix.eventfile }})
          export _NSIDES="1:0"

          cd ./resources/launch_scripts
          python3 local_scan.py $N_WORKERS $CI_TEST_RUN_STDOUT_STDERR_DIR

      - name: test output against known result (.json)
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          ls $CI_SKYSCAN_OUTPUT_DIR
          # get newest run*.json
          outfile=$(find $CI_SKYSCAN_OUTPUT_DIR -type f -name "run*.json" -exec stat -c '%y %n'  {} + | sort | tail -1 | awk '{print $4}')
          echo $outfile
          cat $outfile
          pip install .  # don't need icecube, so no docker container needed
          
          
          # --------------------------------------------------------------------
          # splinempe: special handling + gh-issue reminder timer
          if [[ "${{ matrix.reco_algo }}" == "splinempe" ]]; then
            python tests/compare_scan_results.py \
              --actual $outfile \
              --expected tests/data/results_json/${{ matrix.reco_algo }}/$(basename $outfile) \
              --assert \
              --compare-different-versions-ok \
              || (cat $(ls *.diff.json) && false)
          
            # put the timer after, so at least we know if the test passes
            start_time="2025-03-18"  # Set the starting date
            end_time=$(date -d "$start_time +6 months" +%s)
            current_time=$(date +%s)
            if (( current_time >= end_time )); then
                echo "::error::it's been six months, how's https://github.com/icecube/skymap_scanner/issues/242 going? Are version-0 result files still being used for splinempe?"
                exit 1
            fi
          
            exit 0
          fi
          # --------------------------------------------------------------------
          
          
          python tests/compare_scan_results.py \
            --actual $outfile \
            --expected tests/data/results_json/${{ matrix.reco_algo }}/$(basename $outfile) \
            --assert \
            || (cat $(ls *.diff.json) && false)

      - name: dump output -- central server stdout/stderr
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          cat $CI_TEST_RUN_STDOUT_STDERR_DIR/server.out
      - name: dump output -- worker pilot \#1 stdout/stderr
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          more $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot.out | cat
      - name: dump output -- worker clients / reco-icetray instances \#1 stdouts/stderrs
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          find $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot-* -name "stderrfile" -o -name "stdoutfile" | xargs more | cat
          echo "::::::::::::::" && tree $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-1/pilot-*
      - name: dump output -- worker pilot \#2 stdout/stderr
        if: always() && env.N_WORKERS == '2'
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          more $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot.out | cat
      - name: dump output -- worker clients / reco-icetray instances \#2 stdouts/stderrs
        if: always() && env.N_WORKERS == '2'
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          find $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot-* -name "stderrfile" -o -name "stdoutfile" | xargs more | cat
          echo "::::::::::::::" && tree $CI_TEST_RUN_STDOUT_STDERR_DIR/worker-2/pilot-*

      - name: rabbitmq logs
        if: always()
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          docker logs rabbitmq

      - name: Upload results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-run-realistic-${{ matrix.reco_algo }}-${{ matrix.eventfile }}-results
          path: |
            ${{ env.CI_SKYSCAN_OUTPUT_DIR }}/**
            *.diff.json
          if-no-files-found: warn
          retention-days: 7


  test-file-staging:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_TAG }}
          load: true
      - name: run
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          source tests/env-vars.sh
          
          docker run --rm -i \
            $(env | grep -E '^(SKYSCAN_|_SKYSCAN_)' | cut -d'=' -f1 | sed 's/^/--env /') \
            $CI_DOCKER_IMAGE_TAG \
            python tests/file_staging.py


  test-run-single-pixel:
    needs: [ flake8 ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: [
          "BRONZE",
          "GOLD",
          "JSON",
        ]
        reco_algo:
          [
            millipede_original,
            millipede_wilks,
            splinempe,
            splinempe_pointed
          ]
        exclude:
          # splinempe should not run on HESE
          - reco_algo: splinempe
            dir: "JSON"
          - reco_algo: splinempe_pointed
            dir: "JSON"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.CI_DOCKER_IMAGE_TAG }}
          load: true
      - name: run
        timeout-minutes: 10  # on average max~=5min
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          set -e
          source tests/env-vars.sh
          
          # run reco directly
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_single/${{ matrix.reco_algo }}/${{ matrix.dir }}),target=/local/test-data \
            --env PY_COLORS=1 \
            $(env | grep -E '^(SKYSCAN_|_SKYSCAN_)' | cut -d'=' -f1 | sed 's/^/--env /') \
            $CI_DOCKER_IMAGE_TAG \
            python -m skymap_scanner.client \
            --infile /local/test-data/in.json \
            --client-startup-json /local/test-data/startup.json \
            --outfile /local/test-data/out-actual.json

      - name: test output against known result
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          source tests/env-vars.sh
          
          ls tests/data/reco_pixel_pkls/${{ matrix.reco_algo }}/${{ matrix.dir }}
          ls tests/data/reco_pixel_single/${{ matrix.reco_algo }}/${{ matrix.dir }}

          # need icecube for depickling, so docker container needed
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_single/${{ matrix.reco_algo }}/${{ matrix.dir }}),target=/local/test-data \
            --env PY_COLORS=1 \
            $(env | grep -E '^(SKYSCAN_|_SKYSCAN_)' | cut -d'=' -f1 | sed 's/^/--env /') \
            $CI_DOCKER_IMAGE_TAG \
            python tests/compare_reco_pixel_single.py \
            --actual /local/test-data/out-actual.json \
            --expected /local/test-data/out.json \
            --diff-out-dir /local/test-data/ \
            --assert \
            || (cat $(ls tests/data/reco_pixel_single/${{ matrix.reco_algo }}/${{ matrix.dir }}/*.diff.json) && false)

      - name: Upload results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-run-single-pixel-${{ matrix.reco_algo }}-${{ matrix.dir }}-results
          path: |
            tests/data/reco_pixel_single/${{ matrix.reco_algo }}/${{ matrix.dir }}/out-actual.json
            tests/data/reco_pixel_single/${{ matrix.reco_algo }}/${{ matrix.dir }}/*.diff.json
          if-no-files-found: warn
          retention-days: 7


  #############################################################################
  # GIT TAG & GITHUB RELEASE
  #############################################################################

  tag-and-release:
    # only run on main/default branch
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      py-versions,
      mypy,
      flake8,
      py-setup,
      py-dependencies,
      test-build-docker,
      test-run-dummy,
      test-file-staging,
      test-run-nsides-thresholds-dummy,
      test-run-realistic,
      test-run-single-pixel,
    ]
    uses: WIPACrepo/wipac-dev-workflows/.github/workflows/tag-and-release.yml@v1.5
    permissions: # for GITHUB_TOKEN
      contents: write
    with:
      project-type: python
      python-version: "${{ fromJSON(needs.py-versions.outputs.matrix)[0] }}"
      release-artifacts: |
        py-dependencies-logs
    secrets:
      TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # trigger tag-event gha workflows
