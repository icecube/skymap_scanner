name: tests

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  PY_COLORS: "1"
  REALTIME_EVENTS_DIR: tests/data/realtime_events
  PULSAR_CONTAINER: pulsar_local
  SKYSCAN_CACHE_DIR: cache-dir
  SKYSCAN_OUTPUT_DIR: output-dir
  PULSAR_ADDRESS: localhost:6650
  PULSAR_AUTH: ""
  SKYSCAN_DEBUG_DIR: debug-pkl-dir
  SKYSCAN_REPORT_INTERVAL_SEC: 60
  CI_TESTING_USE_LOCAL_DOCKER: 1

jobs:

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker Image
        run: |
          docker build --no-cache -t icecube/skymap_scanner .

  test-run-all:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        eventfile: [
          hese_event_01.json,
          run00136766-evt000007637140-GOLD.pkl,
          run00136662-evt000035405932-BRONZE.pkl
        ]
    env:
      CLIENTS_PER_CPU: 1  # there isn't any improvement when >1
    steps:
      - uses: actions/checkout@v3
      - name: Run Pulsar Server Docker Container (starts up during skymap scanner image build)
        run: |
          ./scripts/launch_scripts/pulsar_run.sh $PULSAR_CONTAINER
      - name: Build Skymap Scanner Docker Image
        run: |
          docker build --no-cache -t icecube/skymap_scanner .
      - name: Configure Pulsar Server
        run: |
          export DOCKERIZE_VERSION=v0.3.0
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          dockerize -wait tcp://localhost:8080 -timeout 1m
          dockerize -wait tcp://localhost:6650 -timeout 1m
      - name: Run
        run: |

          mkdir $SKYSCAN_CACHE_DIR
          mkdir $SKYSCAN_OUTPUT_DIR
          ./scripts/launch_scripts/launch_server.sh \
            --reco-algo millipede \
            --event-file $REALTIME_EVENTS_DIR/${{ matrix.eventfile }} \
            --cache-dir $SKYSCAN_CACHE_DIR \
            --output-dir $SKYSCAN_OUTPUT_DIR \
            --startup-files-dir . \
            --broker $PULSAR_ADDRESS \
            --log DEBUG \
            --log-third-party INFO \
            --mini-test-variations \
            --min-nside 1 \
            --max-nside 1 \
            &

          # wait until the mq-basename.txt file exists (with a timeout)
          endtime=$(date -ud "10 minutes" +%s)  # wait this long for server startup
          while [[ $(date -u +%s) -le $endtime ]]; do
            if [[ -e mq-basename.txt && -e baseline_GCD_file.txt && -e GCDQp_packet.pkl ]]; then
              break
            fi
            echo "waiting for startup files..."
            sleep 5
          done

          cat mq-basename.txt

          nclients=$(( $CLIENTS_PER_CPU * $(nproc) ))
          echo "Launching $nclients clients"
          mkdir $SKYSCAN_DEBUG_DIR
          export PULSAR_UNACKED_MESSAGES_TIMEOUT_SEC=1800  # 30 mins
          for i in $( seq 1 $nclients ); do
            ./scripts/launch_scripts/launch_client.sh \
              --mq-basename $(cat mq-basename.txt) \
              --baseline-gcd-file $(cat baseline_GCD_file.txt) \
              --gcdqp-packet-pkl GCDQp_packet.pkl \
              --broker $PULSAR_ADDRESS \
              --log DEBUG \
              --log-third-party INFO \
              --debug-directory $SKYSCAN_DEBUG_DIR \
              &
            echo -e "\t$i clients launched"
          done

          wait -n  # for server
          for i in $( seq 1 $nclients ); do
            wait -n  # for client
          done
      - name: Test Output Against Known Result (.npz)
        run: |
          ls $SKYSCAN_OUTPUT_DIR
          outfile=$(ls -d $SKYSCAN_OUTPUT_DIR/*.npz)
          echo $outfile

          pip install .  # don't need icecube, so no docker container needed
          python tests/compare_scan_results.py \
            --actual $outfile \
            --expected tests/data/results_npz/$(basename $outfile) \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls *.diff.json) && false)

  test-run-pixel-reco:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: [
          "BRONZE",
          "GOLD",
          "JSON",
        ]
    steps:
      - uses: actions/checkout@v3
      - name: Build Skymap Scanner Docker Image
        run: |
          docker build --no-cache -t icecube/skymap_scanner .
      - name: Run
        run: |
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:latest \
            python -m skymap_scanner.client.reco_pixel_pkl \
            --in-pkl /local/pkls/$(basename $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.in.pkl)) \
            --gcdqp-packet-pkl /local/pkls/GCDQp_packet.pkl \
            --baseline-gcd-file $(cat tests/data/reco_pixel_pkls/${{ matrix.dir }}/baseline_GCD_file.txt) \
            --out-pkl /local/pkls/out.pkl \
            --log DEBUG


      - name: Test Output Against Known Result (.pkl)
        run: |
          ls tests/data/reco_pixel_pkls/${{ matrix.dir }}

          # need icecube for depickling, so docker container needed
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:latest \
            python tests/compare_reco_pixel_pkl.py \
            --actual /local/pkls/out.pkl \
            --expected /local/pkls/$(basename $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.out.pkl)) \
            --diff-out-dir /local/pkls/ \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.diff.json) && false))

