name: tests

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  PY_COLORS: "1"
  SKYSCAN_GCD_DIR: /cvmfs/icecube.opensciencegrid.org/users/RealTime/GCD/PoleBaseGCDs/
  REALTIME_EVENTS_DIR: tests/data/realtime_events
  PULSAR_CONTAINER: pulsar_local
  SKYSCAN_CACHE_DIR: cache-dir
  SKYSCAN_OUTPUT_DIR: output-dir
  PULSAR_ADDRESS: localhost:6650
  PULSAR_AUTH: ""
  SKYSCAN_DEBUG_DIR: debug-pkl-dir
  SKYSCAN_REPORT_INTERVAL_SEC: 60
  CI_TESTING_USE_LOCAL_DOCKER: 1

jobs:

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker Image
        run: |
          ./tests/docker_scripts/docker_local_build.sh

  test-run-all:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        eventfile: [
          hese_event_01.json,
          run00136766-evt000007637140-GOLD.pkl,
          run00136662-evt000035405932-BRONZE.pkl
        ]
    env:
      CLIENTS_PER_CPU: 1  # there isn't any improvement when >1
    steps:
      - uses: actions/checkout@v3
      - uses: cvmfs-contrib/github-action-cvmfs@v2
        with:
          cvmfs_backoff_init: 2
          cvmfs_max_retries: 3
          cvmfs_dns_retries: 3
      - name: Test CernVM-FS
        run: ls $SKYSCAN_GCD_DIR
      - name: Run Pulsar Server Docker Container (starts up during skymap scanner image build)
        run: |
          ./scripts/launch_scripts/pulsar_run.sh $PULSAR_CONTAINER
      - name: Build Skymap Scanner Docker Image
        run: |
          ./tests/docker_scripts/docker_local_build.sh
      - name: Configure Pulsar Server
        run: |
          ./tests/docker_scripts/pulsar_config.sh $PULSAR_CONTAINER
      - name: Run
        run: |

          mkdir $GITHUB_WORKSPACE/$SKYSCAN_CACHE_DIR
          mkdir $GITHUB_WORKSPACE/$SKYSCAN_OUTPUT_DIR
          ./scripts/launch_scripts/launch_server.sh \
            --event-file $GITHUB_WORKSPACE/$REALTIME_EVENTS_DIR/${{ matrix.eventfile }} \
            --cache-dir $GITHUB_WORKSPACE/$SKYSCAN_CACHE_DIR \
            --output-dir $GITHUB_WORKSPACE \
            --startup-files-dir $GITHUB_WORKSPACE \
            --gcd-dir $SKYSCAN_GCD_DIR \
            --broker $PULSAR_ADDRESS \
            --log DEBUG \
            --mini-test-variations \
            --min-nside 1 \
            --max-nside 1 \
            &

          # wait until the mq-basename.txt file exists (with a timeout)
          endtime=$(date -ud "10 minutes" +%s)  # wait this long for server startup
          while [[ $(date -u +%s) -le $endtime ]]; do
            if [[ -e $GITHUB_WORKSPACE/mq-basename.txt && -e $GITHUB_WORKSPACE/baseline_GCD_file.txt && -e $GITHUB_WORKSPACE/GCDQp_packet.pkl ]]; then
              break
            fi
            sleep 5
          done

          cat $GITHUB_WORKSPACE/mq-basename.txt

          nclients=$(( $CLIENTS_PER_CPU * $(nproc) ))
          echo "Launching $nclients clients"
          mkdir $GITHUB_WORKSPACE/$SKYSCAN_DEBUG_DIR
          export PULSAR_UNACKED_MESSAGES_TIMEOUT_SEC=1800  # 30 mins
          for i in $( seq 1 $nclients ); do
            ./scripts/launch_scripts/launch_client.sh \
              --mq-basename $(cat $GITHUB_WORKSPACE/mq-basename.txt) \
              --baseline-gcd-file $(cat $GITHUB_WORKSPACE/baseline_GCD_file.txt) \
              --gcdqp-packet-pkl $GITHUB_WORKSPACE/GCDQp_packet.pkl \
              --gcd-dir $SKYSCAN_GCD_DIR \
              --broker $PULSAR_ADDRESS \
              --log DEBUG \
              --debug-directory $GITHUB_WORKSPACE/$SKYSCAN_DEBUG_DIR \
              &
            echo -e "\t$i clients launched"
          done

          wait -n  # for server
          for i in $( seq 1 $nclients ); do
            wait -n  # for client
          done
      - name: Test Output Against Known Result (.npz)
        run: |
          ls $GITHUB_WORKSPACE/$SKYSCAN_OUTPUT_DIR
          outfile=$(ls -d $GITHUB_WORKSPACE/$SKYSCAN_OUTPUT_DIR/*.npz)
          echo $outfile

          pip install .  # don't have to use the docker container for this
          python $GITHUB_WORKSPACE/tests/compare_scan_results.py \
            --actual $outfile \
            --expected $GITHUB_WORKSPACE/tests/data/results_npz/$(basename $outfile) \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls *.diff.json) && false)


  test-run-pixel-reco:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkl-prefix: [
          "1657734371.72056",
          "1657735973.0575783",
          "1657739174.4579704",
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: cvmfs-contrib/github-action-cvmfs@v2
        with:
          cvmfs_backoff_init: 2
          cvmfs_max_retries: 3
          cvmfs_dns_retries: 3
      - name: Test CernVM-FS
        run: ls $SKYSCAN_GCD_DIR
      - name: Build Skymap Scanner Docker Image
        run: |
          ./tests/docker_scripts/docker_local_build.sh
      - name: Run
        run: |
          ./tests/docker_scripts/_launch_reco_pixel.sh \
            $GITHUB_WORKSPACE/tests/data/reco_pixel_pkls/${{ matrix.pkl-prefix }}.in.pkl
      # - name: Test Output Against Known Result (.pkl)
      #   run: |
      #     # we need to launch in docker conatiner b/c pickle needs icecube
      #     docker run --network="host" --rm -i \
      #       --mount type=bind,source=$GITHUB_WORKSPACE/tests/data/reco_pixel_pkls,target=/local/pkls \
      #       icecube/skymap_scanner:latest \
      #       python /local/tests/compare_reco_pixel_pkl.py \
      #       --actual /local/pkls/${{ matrix.pkl-prefix }}.in.pkl /local/pkls/${{ matrix.pkl-prefix }}.out.pkl \
      #       --expected /local/pkls/${{ matrix.pkl-prefix }}.in.pkl /local/pkls/out.pkl \
      #       --diff-out-dir $GITHUB_WORKSPACE/tests/data/reco_pixel_pkls \
      #       --disqualify-zero-energy-pixels \
      #       --assert \
      #       || (cat $(ls $GITHUB_WORKSPACE/tests/data/reco_pixel_pkls/*.diff.json) && false)
