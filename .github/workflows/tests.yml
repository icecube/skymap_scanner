name: tests

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  PY_COLORS: "1"
  REALTIME_EVENTS_DIR: tests/data/realtime_events
  SKYSCAN_CACHE_DIR: cache-dir
  SKYSCAN_OUTPUT_DIR: output-dir
  BROKER_ADDRESS: localhost:6650
  SKYSCAN_DEBUG_DIR: debug-pkl-dir
  SKYSCAN_REPORT_INTERVAL_SEC: 60
  CI_TESTING_USE_LOCAL_DOCKER: 1

jobs:

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker Image
        run: |
          docker build --no-cache -t icecube/skymap_scanner .

  test-run-all:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        broker: [default, pulsar, rabbitmq, gcp, nats]
        eventfile: [
          hese_event_01.json,
          run00136766-evt000007637140-GOLD.pkl,
          run00136662-evt000035405932-BRONZE.pkl
        ]
    env:
      CLIENTS_PER_CPU: 1  # there isn't any improvement when >1
    steps:
      - uses: actions/checkout@v3
      - name: Checkout MQClient repo (for broker startup scripts)
        uses: actions/checkout@v3
        with:
          repository: WIPACrepo/MQClient
          path: MQClient
      - name: Build Skymap Scanner Docker Image
        run: |
          docker build --no-cache -t icecube/skymap_scanner .
      - name: Run
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker }}" = "default" ] || [ "${{ matrix.broker }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh
          # RabbitMQ
          elif [ "${{ matrix.broker }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh
          # GCP
          elif [ "${{ matrix.broker }}" = "gcp" ]; then
            export PUBSUB_EMULATOR_HOST=localhost:8085
            ./MQClient/resources/local-gcp-emulator.sh
          # NATS
          elif [ "${{ matrix.broker }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          if [ "${{ matrix.broker }}" != "default" ]; then
            export SKYSCAN_BROKER_CLIENT="${{ matrix.broker }}"
          fi

          mkdir $SKYSCAN_CACHE_DIR
          mkdir $SKYSCAN_OUTPUT_DIR
          ./scripts/launch_scripts/launch_server.sh \
            --reco-algo millipede \
            --event-file $REALTIME_EVENTS_DIR/${{ matrix.eventfile }} \
            --cache-dir $SKYSCAN_CACHE_DIR \
            --output-dir $SKYSCAN_OUTPUT_DIR \
            --startup-json-dir . \
            --broker $BROKER_ADDRESS \
            --log DEBUG \
            --log-third-party INFO \
            --mini-test-variations \
            --min-nside 1 \
            --max-nside 1 \
            &

          ./scripts/launch_scripts/wait_for_startup_json.sh .

          # nclients=$(( $CLIENTS_PER_CPU * $(nproc) ))
          nclients=1
          echo "Launching $nclients clients"
          mkdir $SKYSCAN_DEBUG_DIR
          export PULSAR_UNACKED_MESSAGES_TIMEOUT_SEC=1800  # 30 mins
          for i in $( seq 1 $nclients ); do
            ./scripts/launch_scripts/launch_client.sh \
              --startup-json-dir . \
              --broker $BROKER_ADDRESS \
              --log DEBUG \
              --log-third-party INFO \
              --debug-directory $SKYSCAN_DEBUG_DIR \
              &
            echo -e "\t$i clients launched"
          done

          wait -n  # for server
          for i in $( seq 1 $nclients ); do
            wait -n  # for client
          done
      - name: Test Output Against Known Result (.npz)
        run: |
          ls $SKYSCAN_OUTPUT_DIR
          outfile=$(ls -d $SKYSCAN_OUTPUT_DIR/*.npz)
          echo $outfile

          pip install .  # don't need icecube, so no docker container needed
          python tests/compare_scan_results.py \
            --actual $outfile \
            --expected tests/data/results_npz/$(basename $outfile) \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls *.diff.json) && false)

  test-run-pixel-reco:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: [
          "BRONZE",
          "GOLD",
          "JSON",
        ]
    steps:
      - uses: actions/checkout@v3
      - name: Build Skymap Scanner Docker Image
        run: |
          docker build --no-cache -t icecube/skymap_scanner .
      - name: Run
        run: |
          jq '.GCDQp_packet' tests/data/reco_pixel_pkls/${{ matrix.dir }}/startup.json > tests/data/reco_pixel_pkls/${{ matrix.dir }}//GCDQp_packet.json

          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:latest \
            python -m skymap_scanner.client.reco_pixel_pkl \
            --in-pkl /local/pkls/$(basename $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.in.pkl)) \
            --gcdqp-packet-json /local/pkls/GCDQp_packet.json \
            --baseline-gcd-file $(jq -r '.baseline_GCD_file' tests/data/reco_pixel_pkls/${{ matrix.dir }}/startup.json) \
            --out-pkl /local/pkls/out.pkl \
            --log DEBUG


      - name: Test Output Against Known Result (.pkl)
        run: |
          ls tests/data/reco_pixel_pkls/${{ matrix.dir }}

          # need icecube for depickling, so docker container needed
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:latest \
            python tests/compare_reco_pixel_pkl.py \
            --actual /local/pkls/out.pkl \
            --expected /local/pkls/$(basename $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.out.pkl)) \
            --diff-out-dir /local/pkls/ \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.diff.json) && false)

