name: tests

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PY_COLORS: "1"
  REALTIME_EVENTS_DIR: tests/data/realtime_events
  SKYSCAN_CACHE_DIR: cache-dir
  SKYSCAN_OUTPUT_DIR: output-dir
  SKYSCAN_BROKER_CLIENT: rabbitmq
  SKYSCAN_BROKER_ADDRESS: localhost
  RABBITMQ_HEARTBEAT: 600
  # SKYSCAN_BROKER_AUTH: admin
  SKYSCAN_DEBUG_DIR: debug-pkl-dir
  SKYSCAN_MQ_TIMEOUT_TO_CLIENTS: 60
  # SKYSCAN_MQ_TIMEOUT_FROM_CLIENTS: 60  # use default
  SKYSCAN_MQ_CLIENT_TIMEOUT_WAIT_FOR_FIRST_MESSAGE: 120
  SKYSCAN_DOCKER_PULL_ALWAYS: 0
  SKYSCAN_DOCKER_IMAGE_TAG: local
  SKYSCAN_MINI_TEST: 'yes'
  SKYSCAN_LOG: DEBUG
  SKYSCAN_LOG_THIRD_PARTY: INFO
  CLIENT_STARTER_WAIT_FOR_STARTUP_JSON: 120
  BROKER_CONTAINER_NAME: the-message-broker

jobs:

  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: icecube/skymap_scanner:local

  test-build-docker-pulsar:
    runs-on: ubuntu-latest
    needs: test-build-docker
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          file: Dockerfile_pulsar
          tags: icecube/skymap_scanner:local-pulsar

  test-run-singularity-dummy-reco:
    runs-on: ubuntu-latest
    needs: test-build-docker
    steps:
      - uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: 'true'
          large-packages: false  # TODO: remove once https://github.com/jlumbroso/free-disk-space/issues/4 is fixed
      - uses: actions/checkout@v3
      - name: checkout MQClient repo
        uses: actions/checkout@v3
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: icecube/skymap_scanner:local
          load: true
      - uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.1.2
      - name: build singularity image
        run: |
          sudo singularity build skymap_scanner.sif docker-daemon://icecube/skymap_scanner:local
          ls -lh skymap_scanner.sif
      - name: run singularity container
        run: |
          ./MQClient/resources/docker-rabbitmq.sh $BROKER_CONTAINER_NAME

          mkdir $SKYSCAN_CACHE_DIR
          mkdir $SKYSCAN_OUTPUT_DIR

          # Launch Server
          singularity run skymap_scanner.sif \
            python -m skymap_scanner.server \
            --reco-algo dummy \
            --event-file $REALTIME_EVENTS_DIR/hese_event_01.json \
            --cache-dir $SKYSCAN_CACHE_DIR \
            --output-dir $SKYSCAN_OUTPUT_DIR \
            --client-startup-json ./startup.json \
            --nsides 1:12 \
            --simulated-event \
            &

          ./resources/launch_scripts/wait_for_file.sh ./startup.json $CLIENT_STARTER_WAIT_FOR_STARTUP_JSON

          # Launch Clients
          nclients=$(( $CLIENTS_PER_CPU * $(nproc) ))
          echo "Launching $nclients clients"
          mkdir $SKYSCAN_DEBUG_DIR
          export PULSAR_UNACKED_MESSAGES_TIMEOUT_SEC=1800  # 30 mins
          for i in $( seq 1 $nclients ); do
            singularity run skymap_scanner.sif \
              python -m skymap_scanner.client \
              --client-startup-json ./startup.json \
              --debug-directory $SKYSCAN_DEBUG_DIR \
              &
            echo -e "\tclient #$i launched"
          done

          wait -n  # for server
          for i in $( seq 1 $nclients ); do
            wait -n  # for client
          done
      - name: look at results file (.npz)
        run: |
          ls .
          ls $SKYSCAN_OUTPUT_DIR
          outfile=$(ls -d $SKYSCAN_OUTPUT_DIR/*.npz)
          echo $outfile
      - name: broker output
        if: always()
        run: |
          cat ./broker.out
      - name: broker docker logs
        if: always()
        run: |
          docker logs $BROKER_CONTAINER_NAME || true

  test-run-docker:
    runs-on: ubuntu-latest
    needs: test-build-docker
    services:
        rabbitmq:
          image: bitnami/rabbitmq:latest
          volumes:
            - /home/runner/rabbitmq_conf:/bitnami/conf  # RABBITMQ_MOUNTED_CONF_DIR
          env:
            RABBITMQ_USERNAME: guest
            RABBITMQ_PASSWORD: guest
            # RABBITMQ_VHOST: test
            BITNAMI_DEBUG: true
          # Note: `--network` option is not supported.
          options: >-
            --name rabbitmq
            --health-cmd "rabbitmqctl node_health_check"
            --health-interval 5s
            --health-timeout 5s
            --health-retries 10
          ports:
          - 5672:5672
          - 15672:15672
    strategy:
      fail-fast: false
      matrix:
        eventfile: [
          hese_event_01.json,
          run00136766-evt000007637140-GOLD.pkl,
          run00136662-evt000035405932-BRONZE.pkl
        ]
    env:
      CLIENTS_PER_CPU: 1  # there isn't any improvement when >1
    steps:
      - uses: actions/checkout@v3
      - name: reconfigure rabbitmq
        # bitnami image allows (see bitnami/rabbitmq readme):
        # Here we're copying a rabbitmq.config file which won't do anything.
        # We need to switch to custom.conf or advanced.config.
        timeout-minutes: 2  # may die if rabbitmq fails to start
        run: |
          CUSTOM_CONF="/home/runner/rabbitmq_conf/custom.conf"
          sudo bash -c "echo -e 'log.console.level = debug\n' >> $CUSTOM_CONF"
          sudo bash -c "echo -e 'loopback_users = none\n' >> $CUSTOM_CONF"  # allows guest/guest from non-localhost
          # refresh rabbitmq config - based on ENTRYPOINT logic
          docker exec rabbitmq bash -c 'cat /bitnami/conf/custom.conf >> /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf'
          # sleep to prevent interleaved output in GHA logs
          docker exec rabbitmq cat /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf && sleep 1
          echo
          echo restarting rabbitmq container
          docker restart rabbitmq
          # wait for rabbitmq container to restart
          # TODO: Add timeout for just in case (config error or similar)
          # shellcheck disable=SC1083
          until [ "$(docker inspect -f {{.State.Running}} rabbitmq)" == "true" ]; do sleep 0.1; done
          echo enabled RabbitMQ plugins:
          # print plugins list to: (1) ease debugging, (2) pause till rabbitmq is really running
          docker exec rabbitmq rabbitmq-plugins list -e
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: icecube/skymap_scanner:local
          load: true
      - name: run
        run: |
          set -x

          mkdir $SKYSCAN_CACHE_DIR
          mkdir $SKYSCAN_OUTPUT_DIR

          # Launch Server
          ./resources/launch_scripts/docker/launch_server.sh \
            --reco-algo millipede_original \
            --event-file $REALTIME_EVENTS_DIR/${{ matrix.eventfile }} \
            --cache-dir $SKYSCAN_CACHE_DIR \
            --output-dir $SKYSCAN_OUTPUT_DIR \
            --client-startup-json ./startup.json \
            --nsides 1:12 \
            --real-event \
            &

          ./resources/launch_scripts/wait_for_file.sh ./startup.json $CLIENT_STARTER_WAIT_FOR_STARTUP_JSON

          # Launch Clients
          nclients=$(( $CLIENTS_PER_CPU * $(nproc) ))
          echo "Launching $nclients clients"
          mkdir $SKYSCAN_DEBUG_DIR
          export PULSAR_UNACKED_MESSAGES_TIMEOUT_SEC=1800  # 30 mins
          for i in $( seq 1 $nclients ); do
            ./resources/launch_scripts/docker/launch_client.sh \
              --client-startup-json ./startup.json \
              --debug-directory $SKYSCAN_DEBUG_DIR \
              &
            echo -e "\tclient #$i launched"
          done

          # Wait for Everyone
          wait -n  # for server
          for i in $( seq 1 $nclients ); do
            wait -n  # for client
          done
      - name: test output against known result (.npz/.json)
        run: |
          ls $SKYSCAN_OUTPUT_DIR
          outfile=$(ls -d $SKYSCAN_OUTPUT_DIR/*.json)
          echo $outfile

          pip install .  # don't need icecube, so no docker container needed
          python tests/compare_scan_results.py \
            --actual $outfile \
            --expected $(echo tests/data/results_npz/$(basename $outfile) | sed 's/.json/.npz/g') \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls *.diff.json) && false)
      - name: broker docker logs
        if: always()
        run: |
          docker logs rabbitmq

  test-run-single-pixel:
    runs-on: ubuntu-latest
    needs: test-build-docker
    strategy:
      fail-fast: false
      matrix:
        dir: [
          "BRONZE",
          "GOLD",
          "JSON",
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: icecube/skymap_scanner:local
          load: true
      - name: run
        run: |
          # grab the GCDQp_packet key and throw into a file
          jq '.GCDQp_packet' \
            tests/data/reco_pixel_pkls/${{ matrix.dir }}/startup.json > \
            tests/data/reco_pixel_pkls/${{ matrix.dir }}//GCDQp_packet.json

          # move python file to subdir to make bindings simpler
          cp tests/data/reco_pixel_pkls/get_toclient_msg_pkl.py \
            tests/data/reco_pixel_pkls/${{ matrix.dir }}

          # create the in.pkl
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:local \
            python /local/pkls/get_toclient_msg_pkl.py \
            --pframe-pkl /local/pkls/pframe.pkl \
            --reco-algo millipede_original

          hexdump -C tests/data/reco_pixel_pkls/${{ matrix.dir }}/in.pkl

          # run
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:local \
            python -m skymap_scanner.client.reco_icetray \
            --in-pkl /local/pkls/in.pkl \
            --gcdqp-packet-json /local/pkls/GCDQp_packet.json \
            --baseline-gcd-file $(jq -r '.baseline_GCD_file' tests/data/reco_pixel_pkls/${{ matrix.dir }}/startup.json) \
            --out-pkl /local/pkls/out.pkl

      - name: test output against known result (.pkl)
        run: |
          ls tests/data/reco_pixel_pkls/${{ matrix.dir }}

          # need icecube for depickling, so docker container needed
          docker run --network="host" --rm -i \
            --shm-size=6gb \
            --mount type=bind,source=$(readlink -f tests/data/reco_pixel_pkls/${{ matrix.dir }}),target=/local/pkls \
            --env PY_COLORS=1 \
            $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
            icecube/skymap_scanner:local \
            python tests/compare_reco_pixel_pkl.py \
            --actual /local/pkls/out.pkl \
            --expected /local/pkls/$(basename $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.out.pkl)) \
            --diff-out-dir /local/pkls/ \
            --disqualify-zero-energy-pixels \
            --assert \
            || (cat $(ls tests/data/reco_pixel_pkls/${{ matrix.dir }}/*.diff.json) && false)

